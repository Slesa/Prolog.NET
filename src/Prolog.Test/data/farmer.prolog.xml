<?xml version="1.0" encoding="utf-8"?>
<ProgramTest programName="farmer.prolog">
  <TestCase>
    <Source>equate(X,X).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>equate</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>X</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>X</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>cargo(goat).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>cargo</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeCompoundTerm>
                <CodeFunctor>
                  <Name>goat</Name>
                  <Arity>0</Arity>
                </CodeFunctor>
                <CodeTermList />
              </CodeCompoundTerm>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>cargo(chicken).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>cargo</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeCompoundTerm>
                <CodeFunctor>
                  <Name>chicken</Name>
                  <Arity>0</Arity>
                </CodeFunctor>
                <CodeTermList />
              </CodeCompoundTerm>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>cargo(seed).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>cargo</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeCompoundTerm>
                <CodeFunctor>
                  <Name>seed</Name>
                  <Arity>0</Arity>
                </CodeFunctor>
                <CodeTermList />
              </CodeCompoundTerm>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>containsItem([Item|V],Item).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>containsItem</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>V</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Item</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>containsItem([OtherItem|List],Item) :-
    unequal(OtherItem,Item),
    containsItem(List,Item).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>containsItem</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>OtherItem</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>List</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Item</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>unequal</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>OtherItem</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>containsItem</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>List</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>excludesItem([],Item).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>excludesItem</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Item</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>excludesItem([OtherItem|List],Item) :-
    unequal(OtherItem,Item),
    excludesItem(List,Item).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>excludesItem</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>OtherItem</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>List</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Item</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>unequal</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>OtherItem</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>excludesItem</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>List</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>removedFrom([],[],Item).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>removedFrom</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Item</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>removedFrom(NewList,[NewItem|List],Item) :-
    equal(NewItem,Item),
    removedFrom(NewList,List,Item).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>removedFrom</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>NewList</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>NewItem</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>List</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Item</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>equal</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>NewItem</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>removedFrom</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>NewList</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>List</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>removedFrom([NewItem|NewList],[NewItem|List],Item) :-
    unequal(NewItem,Item),
    removedFrom(NewList,List,Item).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>removedFrom</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>NewItem</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>NewList</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>NewItem</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>List</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Item</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>unequal</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>NewItem</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>removedFrom</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>NewList</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>List</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([goat]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>goat</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([chicken]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>chicken</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([seed]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>seed</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([goat,seed]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>goat</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>seed</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([seed,goat]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>seed</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>goat</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([goat,chicken,seed]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>goat</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>chicken</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>seed</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([goat,seed,chicken]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>goat</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>seed</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>chicken</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([chicken,goat,seed]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>chicken</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>goat</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>seed</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([seed,goat,chicken]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>seed</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>goat</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>chicken</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([chicken,seed,goat]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>chicken</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>seed</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>goat</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>safe([seed,chicken,goat]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>safe</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>seed</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>chicken</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>goat</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>validMove(NewState,Cargo,State) :-
    containsItem(State,farmer),
    removedFrom(StateWithoutFarmer,State,farmer),
    cargo(Cargo),
    containsItem(StateWithoutFarmer,Cargo),
    removedFrom(NewState,StateWithoutFarmer,Cargo),
    safe(NewState).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>validMove</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>NewState</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Cargo</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>State</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>containsItem</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>State</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>farmer</Name>
                    <Arity>0</Arity>
                  </CodeFunctor>
                  <CodeTermList />
                </CodeCompoundTerm>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>removedFrom</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>StateWithoutFarmer</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>State</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>farmer</Name>
                    <Arity>0</Arity>
                  </CodeFunctor>
                  <CodeTermList />
                </CodeCompoundTerm>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>cargo</Name>
              <Arity>1</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Cargo</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>containsItem</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>StateWithoutFarmer</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Cargo</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>removedFrom</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>NewState</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>StateWithoutFarmer</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Cargo</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>safe</Name>
              <Arity>1</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>NewState</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>validMove(StateWithoutFarmer,State) :-
    containsItem(State,farmer),
    removedFrom(StateWithoutFarmer,State,farmer),
    safe(StateWithoutFarmer).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>validMove</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>StateWithoutFarmer</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>State</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>containsItem</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>State</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>farmer</Name>
                    <Arity>0</Arity>
                  </CodeFunctor>
                  <CodeTermList />
                </CodeCompoundTerm>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>removedFrom</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>StateWithoutFarmer</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>State</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>farmer</Name>
                    <Arity>0</Arity>
                  </CodeFunctor>
                  <CodeTermList />
                </CodeCompoundTerm>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>safe</Name>
              <Arity>1</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>StateWithoutFarmer</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>startState(state([farmer,goat,chicken,seed],[])).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>startState</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeCompoundTerm>
                <CodeFunctor>
                  <Name>state</Name>
                  <Arity>2</Arity>
                </CodeFunctor>
                <CodeTermList>
                  <CodeTerm>
                    <CodeList>
                      <CodeTermList>
                        <CodeTerm>
                          <CodeCompoundTerm>
                            <CodeFunctor>
                              <Name>farmer</Name>
                              <Arity>0</Arity>
                            </CodeFunctor>
                            <CodeTermList />
                          </CodeCompoundTerm>
                        </CodeTerm>
                        <CodeTerm>
                          <CodeCompoundTerm>
                            <CodeFunctor>
                              <Name>goat</Name>
                              <Arity>0</Arity>
                            </CodeFunctor>
                            <CodeTermList />
                          </CodeCompoundTerm>
                        </CodeTerm>
                        <CodeTerm>
                          <CodeCompoundTerm>
                            <CodeFunctor>
                              <Name>chicken</Name>
                              <Arity>0</Arity>
                            </CodeFunctor>
                            <CodeTermList />
                          </CodeCompoundTerm>
                        </CodeTerm>
                        <CodeTerm>
                          <CodeCompoundTerm>
                            <CodeFunctor>
                              <Name>seed</Name>
                              <Arity>0</Arity>
                            </CodeFunctor>
                            <CodeTermList />
                          </CodeCompoundTerm>
                        </CodeTerm>
                      </CodeTermList>
                      <CodeTerm>
                        <CodeCompoundTerm>
                          <CodeFunctor>
                            <Name>nil</Name>
                            <Arity>0</Arity>
                          </CodeFunctor>
                          <CodeTermList />
                        </CodeCompoundTerm>
                      </CodeTerm>
                    </CodeList>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeList>
                      <CodeTermList />
                      <CodeTerm>
                        <CodeCompoundTerm>
                          <CodeFunctor>
                            <Name>nil</Name>
                            <Arity>0</Arity>
                          </CodeFunctor>
                          <CodeTermList />
                        </CodeCompoundTerm>
                      </CodeTerm>
                    </CodeList>
                  </CodeTerm>
                </CodeTermList>
              </CodeCompoundTerm>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>stopState(state([],X)).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>stopState</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeCompoundTerm>
                <CodeFunctor>
                  <Name>state</Name>
                  <Arity>2</Arity>
                </CodeFunctor>
                <CodeTermList>
                  <CodeTerm>
                    <CodeList>
                      <CodeTermList />
                      <CodeTerm>
                        <CodeCompoundTerm>
                          <CodeFunctor>
                            <Name>nil</Name>
                            <Arity>0</Arity>
                          </CodeFunctor>
                          <CodeTermList />
                        </CodeCompoundTerm>
                      </CodeTerm>
                    </CodeList>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeVariable>X</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
              </CodeCompoundTerm>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>possibleMove(NewState,[state(L,R)|States]) :-
    validMove(NewL,Cargo,L),
    equate(state(NewL,[farmer,Cargo|R]),NewState),
    excludesItem(States,NewState).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>possibleMove</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>NewState</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>state</Name>
                        <Arity>2</Arity>
                      </CodeFunctor>
                      <CodeTermList>
                        <CodeTerm>
                          <CodeVariable>L</CodeVariable>
                        </CodeTerm>
                        <CodeTerm>
                          <CodeVariable>R</CodeVariable>
                        </CodeTerm>
                      </CodeTermList>
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>States</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>validMove</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>NewL</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Cargo</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>L</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>equate</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>state</Name>
                    <Arity>2</Arity>
                  </CodeFunctor>
                  <CodeTermList>
                    <CodeTerm>
                      <CodeVariable>NewL</CodeVariable>
                    </CodeTerm>
                    <CodeTerm>
                      <CodeList>
                        <CodeTermList>
                          <CodeTerm>
                            <CodeCompoundTerm>
                              <CodeFunctor>
                                <Name>farmer</Name>
                                <Arity>0</Arity>
                              </CodeFunctor>
                              <CodeTermList />
                            </CodeCompoundTerm>
                          </CodeTerm>
                          <CodeTerm>
                            <CodeVariable>Cargo</CodeVariable>
                          </CodeTerm>
                        </CodeTermList>
                        <CodeTerm>
                          <CodeVariable>R</CodeVariable>
                        </CodeTerm>
                      </CodeList>
                    </CodeTerm>
                  </CodeTermList>
                </CodeCompoundTerm>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>NewState</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>excludesItem</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>States</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>NewState</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>possibleMove(NewState,[state(L,R)|States]) :-
    validMove(NewR,Cargo,R),
    equate(state([farmer,Cargo|L],NewR),NewState),
    excludesItem(States,NewState).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>possibleMove</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>NewState</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>state</Name>
                        <Arity>2</Arity>
                      </CodeFunctor>
                      <CodeTermList>
                        <CodeTerm>
                          <CodeVariable>L</CodeVariable>
                        </CodeTerm>
                        <CodeTerm>
                          <CodeVariable>R</CodeVariable>
                        </CodeTerm>
                      </CodeTermList>
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>States</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>validMove</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>NewR</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Cargo</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>R</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>equate</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>state</Name>
                    <Arity>2</Arity>
                  </CodeFunctor>
                  <CodeTermList>
                    <CodeTerm>
                      <CodeList>
                        <CodeTermList>
                          <CodeTerm>
                            <CodeCompoundTerm>
                              <CodeFunctor>
                                <Name>farmer</Name>
                                <Arity>0</Arity>
                              </CodeFunctor>
                              <CodeTermList />
                            </CodeCompoundTerm>
                          </CodeTerm>
                          <CodeTerm>
                            <CodeVariable>Cargo</CodeVariable>
                          </CodeTerm>
                        </CodeTermList>
                        <CodeTerm>
                          <CodeVariable>L</CodeVariable>
                        </CodeTerm>
                      </CodeList>
                    </CodeTerm>
                    <CodeTerm>
                      <CodeVariable>NewR</CodeVariable>
                    </CodeTerm>
                  </CodeTermList>
                </CodeCompoundTerm>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>NewState</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>excludesItem</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>States</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>NewState</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>possibleMove(NewState,[state(L,R)|States]) :-
    validMove(NewL,L),
    equate(state(NewL,[farmer|R]),NewState),
    excludesItem(States,NewState).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>possibleMove</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>NewState</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>state</Name>
                        <Arity>2</Arity>
                      </CodeFunctor>
                      <CodeTermList>
                        <CodeTerm>
                          <CodeVariable>L</CodeVariable>
                        </CodeTerm>
                        <CodeTerm>
                          <CodeVariable>R</CodeVariable>
                        </CodeTerm>
                      </CodeTermList>
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>States</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>validMove</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>NewL</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>L</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>equate</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>state</Name>
                    <Arity>2</Arity>
                  </CodeFunctor>
                  <CodeTermList>
                    <CodeTerm>
                      <CodeVariable>NewL</CodeVariable>
                    </CodeTerm>
                    <CodeTerm>
                      <CodeList>
                        <CodeTermList>
                          <CodeTerm>
                            <CodeCompoundTerm>
                              <CodeFunctor>
                                <Name>farmer</Name>
                                <Arity>0</Arity>
                              </CodeFunctor>
                              <CodeTermList />
                            </CodeCompoundTerm>
                          </CodeTerm>
                        </CodeTermList>
                        <CodeTerm>
                          <CodeVariable>R</CodeVariable>
                        </CodeTerm>
                      </CodeList>
                    </CodeTerm>
                  </CodeTermList>
                </CodeCompoundTerm>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>NewState</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>excludesItem</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>States</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>NewState</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>possibleMove(NewState,[state(L,R)|States]) :-
    validMove(NewR,R),
    equate(state([farmer|L],NewR),NewState),
    excludesItem(States,NewState).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>possibleMove</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>NewState</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>state</Name>
                        <Arity>2</Arity>
                      </CodeFunctor>
                      <CodeTermList>
                        <CodeTerm>
                          <CodeVariable>L</CodeVariable>
                        </CodeTerm>
                        <CodeTerm>
                          <CodeVariable>R</CodeVariable>
                        </CodeTerm>
                      </CodeTermList>
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>States</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>validMove</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>NewR</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>R</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>equate</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>state</Name>
                    <Arity>2</Arity>
                  </CodeFunctor>
                  <CodeTermList>
                    <CodeTerm>
                      <CodeList>
                        <CodeTermList>
                          <CodeTerm>
                            <CodeCompoundTerm>
                              <CodeFunctor>
                                <Name>farmer</Name>
                                <Arity>0</Arity>
                              </CodeFunctor>
                              <CodeTermList />
                            </CodeCompoundTerm>
                          </CodeTerm>
                        </CodeTermList>
                        <CodeTerm>
                          <CodeVariable>L</CodeVariable>
                        </CodeTerm>
                      </CodeList>
                    </CodeTerm>
                    <CodeTerm>
                      <CodeVariable>NewR</CodeVariable>
                    </CodeTerm>
                  </CodeTermList>
                </CodeCompoundTerm>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>NewState</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>excludesItem</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>States</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>NewState</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>possibleSolution([State]) :-
    startState(State).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>possibleSolution</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>State</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>startState</Name>
              <Arity>1</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>State</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>possibleSolution([State|States]) :-
    possibleSolution(States),
    possibleMove(State,States).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>possibleSolution</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>State</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>States</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>possibleSolution</Name>
              <Arity>1</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>States</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>possibleMove</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>State</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>States</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>solution([State|States]) :-
    possibleSolution([State|States]),
    stopState(State).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>solution</Name>
            <Arity>1</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>State</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>States</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>possibleSolution</Name>
              <Arity>1</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeList>
                  <CodeTermList>
                    <CodeTerm>
                      <CodeVariable>State</CodeVariable>
                    </CodeTerm>
                  </CodeTermList>
                  <CodeTerm>
                    <CodeVariable>States</CodeVariable>
                  </CodeTerm>
                </CodeList>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>stopState</Name>
              <Arity>1</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>State</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
</ProgramTest>