<?xml version="1.0" encoding="utf-8"?>
<ProgramTest programName="list.prolog">
  <TestCase>
    <Source>/// append (ResultList, List1, List2)
/// ResultList = List1 + List2
/// List1 + List2 = ResultList
/// 
append(List,[],List).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>append (ResultList, List1, List2)</CodeComment>
        <CodeComment>ResultList = List1 + List2</CodeComment>
        <CodeComment>List1 + List2 = ResultList</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>append</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>List</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>List</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>append([Item|Result],[Item|List1],List2) :-
    append(Result,List1,List2).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>append</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Result</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>List1</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>List2</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>append</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Result</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>List1</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>List2</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// appendItem (ResultList, List, Item)
/// ResultList = List + Item
/// List + Item = ResultList
/// 
appendItem(ResultList,List,Item) :-
    append(ResultList,List,[Item]).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>appendItem (ResultList, List, Item)</CodeComment>
        <CodeComment>ResultList = List + Item</CodeComment>
        <CodeComment>List + Item = ResultList</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>appendItem</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>ResultList</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>List</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Item</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>append</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>ResultList</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>List</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeList>
                  <CodeTermList>
                    <CodeTerm>
                      <CodeVariable>Item</CodeVariable>
                    </CodeTerm>
                  </CodeTermList>
                  <CodeTerm>
                    <CodeCompoundTerm>
                      <CodeFunctor>
                        <Name>nil</Name>
                        <Arity>0</Arity>
                      </CodeFunctor>
                      <CodeTermList />
                    </CodeCompoundTerm>
                  </CodeTerm>
                </CodeList>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// join (List, Left, Pivot, Right)
/// List = Left + Pivot + Right
/// 
join(List,Left,Pivot,Right) :-
    appendItem(L,Left,Pivot),
    append(List,L,Right).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>join (List, Left, Pivot, Right)</CodeComment>
        <CodeComment>List = Left + Pivot + Right</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>join</Name>
            <Arity>4</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>List</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Left</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Pivot</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Right</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>appendItem</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>L</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Left</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Pivot</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>append</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>List</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>L</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Right</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// Member (Item, List)
/// Item = member of List
/// 
member(Item,List) :-
    split(L,Item,R,List).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>Member (Item, List)</CodeComment>
        <CodeComment>Item = member of List</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>member</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Item</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>List</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>split</Name>
              <Arity>4</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>L</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>R</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>List</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// permute (Result, Items)
/// Result = permutation of Items
/// 
permute([Item],[Item]).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>permute (Result, Items)</CodeComment>
        <CodeComment>Result = permutation of Items</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>permute</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>permute(Result,[Item|Items]) :-
    permute(P,Items),
    append(P,Left,Right),
    appendItem(R,Left,Item),
    append(Result,R,Right).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>permute</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Result</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Items</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>permute</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>P</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>append</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>P</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Left</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Right</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>appendItem</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>R</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Left</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>append</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Result</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>R</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Right</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// size (Size, List)
/// Size = size of List
/// List = list of Size
/// 
size(0,[]).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>size (Size, List)</CodeComment>
        <CodeComment>Size = size of List</CodeComment>
        <CodeComment>List = list of Size</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>size</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeValue>
                <CodeValueNumeric>
                  <CodeValueInteger>0</CodeValueInteger>
                </CodeValueNumeric>
              </CodeValue>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>size(Size,[Item|Items]) :-
    size(S,Items),
    (Size := (S + 1)).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>size</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Size</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Items</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>size</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>S</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>:=</Name>
              <Arity>2</Arity>
              <IsOperator>True</IsOperator>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Size</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>+</Name>
                    <Arity>2</Arity>
                    <IsOperator>True</IsOperator>
                  </CodeFunctor>
                  <CodeTermList>
                    <CodeTerm>
                      <CodeVariable>S</CodeVariable>
                    </CodeTerm>
                    <CodeTerm>
                      <CodeValue>
                        <CodeValueNumeric>
                          <CodeValueInteger>1</CodeValueInteger>
                        </CodeValueNumeric>
                      </CodeValue>
                    </CodeTerm>
                  </CodeTermList>
                </CodeCompoundTerm>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// split (Left, Pivot, Right, List)
/// Left + Pivot + Right = List
/// 
split(Left,Pivot,Right,List) :-
    append(List,L,Right),
    appendItem(L,Left,Pivot).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>split (Left, Pivot, Right, List)</CodeComment>
        <CodeComment>Left + Pivot + Right = List</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>split</Name>
            <Arity>4</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Left</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Pivot</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Right</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>List</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>append</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>List</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>L</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Right</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>appendItem</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>L</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Left</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Pivot</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// reverse (Result, Items)
/// Result = reverse of Items
/// 
reverse([],[]).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>reverse (Result, Items)</CodeComment>
        <CodeComment>Result = reverse of Items</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>reverse</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>reverse(Result,[Item|Items]) :-
    reverse(R,Items),
    appendItem(Result,R,Item).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>reverse</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Result</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Items</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>reverse</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>R</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>appendItem</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Result</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>R</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// prefix (Prefix, Items)
/// Prefix = prefix of Items
/// 
prefix(Prefix,Items) :-
    append(Items,Prefix,L).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>prefix (Prefix, Items)</CodeComment>
        <CodeComment>Prefix = prefix of Items</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>prefix</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Prefix</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>append</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Prefix</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>L</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// suffix (Suffix, Items)
/// Suffix = suffix of Items
/// 
suffix(Suffix,Items) :-
    append(Items,L,Suffix).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>suffix (Suffix, Items)</CodeComment>
        <CodeComment>Suffix = suffix of Items</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>suffix</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Suffix</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>append</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>L</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Suffix</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// Partition (LessEqual, Greater, Pivot, Items)
/// LessEqual = members of Items &lt;= Pivot
/// Greater = members of Items &gt; Pivot
/// 
partition([],[],Pivot,[]).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>Partition (LessEqual, Greater, Pivot, Items)</CodeComment>
        <CodeComment>LessEqual = members of Items &lt;= Pivot</CodeComment>
        <CodeComment>Greater = members of Items &gt; Pivot</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>partition</Name>
            <Arity>4</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Pivot</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>partition([Item|LessEqual],Greater,Pivot,[Item|Items]) :-
    (Item =&lt; Pivot),
    partition(LessEqual,Greater,Pivot,Items).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>partition</Name>
            <Arity>4</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>LessEqual</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Greater</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Pivot</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Items</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>=&lt;</Name>
              <Arity>2</Arity>
              <IsOperator>True</IsOperator>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Pivot</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>partition</Name>
              <Arity>4</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>LessEqual</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Greater</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Pivot</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>partition(LessEqual,[Item|Greater],Pivot,[Item|Items]) :-
    (Item &gt; Pivot),
    partition(LessEqual,Greater,Pivot,Items).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>partition</Name>
            <Arity>4</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>LessEqual</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Greater</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Pivot</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Items</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>&gt;</Name>
              <Arity>2</Arity>
              <IsOperator>True</IsOperator>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Pivot</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>partition</Name>
              <Arity>4</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>LessEqual</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Greater</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Pivot</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// qsort (SortedItems, Items)
/// SortedItems = sorted list of Items
/// 
qsort([],[]).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>qsort (SortedItems, Items)</CodeComment>
        <CodeComment>SortedItems = sorted list of Items</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>qsort</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>qsort(Result,[Item|Items]) :-
    partition(LE,G,Item,Items),
    qsort(SortedLE,LE),
    qsort(SortedG,G),
    join(Result,SortedLE,Item,SortedG).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>qsort</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Result</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Items</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>partition</Name>
              <Arity>4</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>LE</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>G</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>qsort</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>SortedLE</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>LE</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>qsort</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>SortedG</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>G</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>join</Name>
              <Arity>4</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Result</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>SortedLE</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Item</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>SortedG</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// sequence (Items, Size)
/// Items = list of integers between 1 and Size, inclusive
/// 
sequence(Items,Size) :-
    sequence(Items,1,Size).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>sequence (Items, Size)</CodeComment>
        <CodeComment>Items = list of integers between 1 and Size, inclusive</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>sequence</Name>
            <Arity>2</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Size</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>sequence</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeValue>
                  <CodeValueNumeric>
                    <CodeValueInteger>1</CodeValueInteger>
                  </CodeValueNumeric>
                </CodeValue>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Size</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// divide (Left, Right, Items, Count)
/// Left = first Count items of Items
/// Right = remaining items of Items
/// 
divide([],Items,Items,0).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>divide (Left, Right, Items, Count)</CodeComment>
        <CodeComment>Left = first Count items of Items</CodeComment>
        <CodeComment>Right = remaining items of Items</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>divide</Name>
            <Arity>4</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeValue>
                <CodeValueNumeric>
                  <CodeValueInteger>0</CodeValueInteger>
                </CodeValueNumeric>
              </CodeValue>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>divide([Item|Left],Right,[Item|Items],Count) :-
    greater(Count,0),
    (SubCount is subtract(Count,1)),
    divide(Left,Right,Items,SubCount).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>divide</Name>
            <Arity>4</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Left</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Right</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Item</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Items</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Count</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>greater</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Count</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeValue>
                  <CodeValueNumeric>
                    <CodeValueInteger>0</CodeValueInteger>
                  </CodeValueNumeric>
                </CodeValue>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>is</Name>
              <Arity>2</Arity>
              <IsOperator>True</IsOperator>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>SubCount</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>subtract</Name>
                    <Arity>2</Arity>
                  </CodeFunctor>
                  <CodeTermList>
                    <CodeTerm>
                      <CodeVariable>Count</CodeVariable>
                    </CodeTerm>
                    <CodeTerm>
                      <CodeValue>
                        <CodeValueNumeric>
                          <CodeValueInteger>1</CodeValueInteger>
                        </CodeValueNumeric>
                      </CodeValue>
                    </CodeTerm>
                  </CodeTermList>
                </CodeCompoundTerm>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>divide</Name>
              <Arity>4</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Left</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Right</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>SubCount</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// shuffle (Result, Items, Count)
/// Result = Items shuffled Count times
/// 
shuffle(Items,Items,0).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>shuffle (Result, Items, Count)</CodeComment>
        <CodeComment>Result = Items shuffled Count times</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>shuffle</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeValue>
                <CodeValueNumeric>
                  <CodeValueInteger>0</CodeValueInteger>
                </CodeValueNumeric>
              </CodeValue>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>shuffle(Result,Items,Count) :-
    greater(Count,0),
    (SubCount is subtract(Count,1)),
    shuffle(S,Items,SubCount),
    size(Size,Items),
    random(0,Size,R),
    divide(Left,Right,S,R),
    merge(Result,Right,Left).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>shuffle</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Result</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Count</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>greater</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Count</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeValue>
                  <CodeValueNumeric>
                    <CodeValueInteger>0</CodeValueInteger>
                  </CodeValueNumeric>
                </CodeValue>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>is</Name>
              <Arity>2</Arity>
              <IsOperator>True</IsOperator>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>SubCount</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>subtract</Name>
                    <Arity>2</Arity>
                  </CodeFunctor>
                  <CodeTermList>
                    <CodeTerm>
                      <CodeVariable>Count</CodeVariable>
                    </CodeTerm>
                    <CodeTerm>
                      <CodeValue>
                        <CodeValueNumeric>
                          <CodeValueInteger>1</CodeValueInteger>
                        </CodeValueNumeric>
                      </CodeValue>
                    </CodeTerm>
                  </CodeTermList>
                </CodeCompoundTerm>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>shuffle</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>S</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>SubCount</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>size</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Size</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>random</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeValue>
                  <CodeValueNumeric>
                    <CodeValueInteger>0</CodeValueInteger>
                  </CodeValueNumeric>
                </CodeValue>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Size</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>R</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>divide</Name>
              <Arity>4</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Left</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Right</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>S</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>R</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>merge</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Result</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Right</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Left</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// merge (Result, Left, Right)
/// Result = merged results of Left and Right
/// 
merge([LeftItem,RightItem|Items],[LeftItem|Left],[RightItem|Right]) :-
    merge(Items,Left,Right).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>merge (Result, Left, Right)</CodeComment>
        <CodeComment>Result = merged results of Left and Right</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>merge</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>LeftItem</CodeVariable>
                  </CodeTerm>
                  <CodeTerm>
                    <CodeVariable>RightItem</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Items</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>LeftItem</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Left</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>RightItem</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Right</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>merge</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Left</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Right</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>merge([],[],[]).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>merge</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>merge(Items,Items,[]) :-
    size(Size,Items),
    greater(Size,0).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>merge</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>size</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Size</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>greater</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Size</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeValue>
                  <CodeValueNumeric>
                    <CodeValueInteger>0</CodeValueInteger>
                  </CodeValueNumeric>
                </CodeValue>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>merge(Items,[],Items) :-
    size(Size,Items),
    greater(Size,0).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>merge</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeList>
                <CodeTermList />
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Items</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>size</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Size</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>greater</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Size</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeValue>
                  <CodeValueNumeric>
                    <CodeValueInteger>0</CodeValueInteger>
                  </CodeValueNumeric>
                </CodeValue>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>/// sequence (Items, Min, Max)
/// Items = list of integers between Min and Max, inclusive
/// 
sequence([Min|Items],Min,Max) :-
    less(Min,Max),
    (MinPlus is add(Min,1)),
    sequence(Items,MinPlus,Max).</Source>
    <CodeSentence>
      <CodeCommentList>
        <CodeComment>sequence (Items, Min, Max)</CodeComment>
        <CodeComment>Items = list of integers between Min and Max, inclusive</CodeComment>
        <CodeComment></CodeComment>
      </CodeCommentList>
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>sequence</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>Min</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeVariable>Items</CodeVariable>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Min</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Max</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>less</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Min</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Max</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>is</Name>
              <Arity>2</Arity>
              <IsOperator>True</IsOperator>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>MinPlus</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeCompoundTerm>
                  <CodeFunctor>
                    <Name>add</Name>
                    <Arity>2</Arity>
                  </CodeFunctor>
                  <CodeTermList>
                    <CodeTerm>
                      <CodeVariable>Min</CodeVariable>
                    </CodeTerm>
                    <CodeTerm>
                      <CodeValue>
                        <CodeValueNumeric>
                          <CodeValueInteger>1</CodeValueInteger>
                        </CodeValueNumeric>
                      </CodeValue>
                    </CodeTerm>
                  </CodeTermList>
                </CodeCompoundTerm>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>sequence</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Items</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>MinPlus</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Max</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>sequence([MinMax],MinMax,MinMax).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>sequence</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeList>
                <CodeTermList>
                  <CodeTerm>
                    <CodeVariable>MinMax</CodeVariable>
                  </CodeTerm>
                </CodeTermList>
                <CodeTerm>
                  <CodeCompoundTerm>
                    <CodeFunctor>
                      <Name>nil</Name>
                      <Arity>0</Arity>
                    </CodeFunctor>
                    <CodeTermList />
                  </CodeCompoundTerm>
                </CodeTerm>
              </CodeList>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>MinMax</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>MinMax</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList />
    </CodeSentence>
  </TestCase>
  <TestCase>
    <Source>test(X,Y,Z) :-
    sequence(X,10),
    shuffle(Y,X,10),
    qsort(Z,Y).</Source>
    <CodeSentence>
      <CodeCommentList />
      <CodeTerm>
        <CodeCompoundTerm>
          <CodeFunctor>
            <Name>test</Name>
            <Arity>3</Arity>
          </CodeFunctor>
          <CodeTermList>
            <CodeTerm>
              <CodeVariable>X</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Y</CodeVariable>
            </CodeTerm>
            <CodeTerm>
              <CodeVariable>Z</CodeVariable>
            </CodeTerm>
          </CodeTermList>
        </CodeCompoundTerm>
      </CodeTerm>
      <CodeCompoundTermList>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>sequence</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>X</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeValue>
                  <CodeValueNumeric>
                    <CodeValueInteger>10</CodeValueInteger>
                  </CodeValueNumeric>
                </CodeValue>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>shuffle</Name>
              <Arity>3</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Y</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>X</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeValue>
                  <CodeValueNumeric>
                    <CodeValueInteger>10</CodeValueInteger>
                  </CodeValueNumeric>
                </CodeValue>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
        <CodeTerm>
          <CodeCompoundTerm>
            <CodeFunctor>
              <Name>qsort</Name>
              <Arity>2</Arity>
            </CodeFunctor>
            <CodeTermList>
              <CodeTerm>
                <CodeVariable>Z</CodeVariable>
              </CodeTerm>
              <CodeTerm>
                <CodeVariable>Y</CodeVariable>
              </CodeTerm>
            </CodeTermList>
          </CodeCompoundTerm>
        </CodeTerm>
      </CodeCompoundTermList>
    </CodeSentence>
  </TestCase>
</ProgramTest>